USE sakila;

-- 1. List the number of films per category.
SELECT rating, COUNT(film_id) AS number_of_films
FROM film
GROUP BY rating;

-- 2. Retrieve the store ID, city, and country for each store.

DESCRIBE address;
DESCRIBE city;
DESCRIBE country;


DESCRIBE store;

SELECT 
    store.store_id,
    city.city AS city_name,
    country.country AS country_name
FROM 
    store
INNER JOIN 
    address ON store.address_id = address.address_id
INNER JOIN 
    city ON address.city_id = city.city_id
INNER JOIN 
    country ON city.country_id = country.country_id;

-- 3. Calculate the Total Revenue Generated by Each Store in Dollars

SELECT store.store_id, SUM(film.rental_rate) AS total_revenue
       
FROM store 
-- store from inventory
LEFT JOIN inventory
ON store.store_id = inventory.store_id
-- inventory from rental
LEFT JOIN rental
ON inventory.inventory_id = rental.inventory_id
-- inventory from film
LEFT JOIN film 
ON inventory.film_id = film.film_id
GROUP BY store.store_id;

-- 4. Determine the average running time of films for each category.
SELECT 
    f.rating, 
    c.name AS category, 
    AVG(f.length) AS average_runtime
FROM 
    film f
INNER JOIN film_category fc 
ON f.film_id = fc.film_id
INNER JOIN category c 
ON fc.category_id = c.category_id
GROUP BY 
    f.rating, c.name
ORDER BY 
    average_runtime DESC;

-- bonus
-- 5. 

SELECT c.name AS category_name, AVG(f.length) AS average_runtime
FROM film f
INNER JOIN film_category fc 
ON f.film_id = fc.film_id
INNER JOIN category c 
ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY average_runtime DESC;

-- 6
SELECT 
    f.title,
    COUNT(r.rental_id) AS rental_count
FROM 
    rental r
-- rental with inventory 
INNER JOIN 
    inventory i ON r.inventory_id = i.inventory_id

-- inventory with film
INNER JOIN 
    film f ON i.film_id = f.film_id
GROUP BY 
    f.title
ORDER BY 
    rental_count DESC
LIMIT 10;

-- 7 
DESCRIBE film_text;

-- 8
SELECT 
    f.title AS film_title,
    CASE 
        WHEN COUNT(i.inventory_id) = 0 THEN 'NOT Available'
        ELSE 'Available'
    END AS availability_status
FROM 
    film f
LEFT JOIN 
    inventory i ON f.film_id = i.film_id
GROUP BY 
    f.title
ORDER BY 
    f.title;

-- NOT Available
SELECT 
    f.title AS film_title,
    CASE 
        WHEN COUNT(i.inventory_id) = 0 THEN 'NOT Available'
    END AS availability_status
FROM 
    film f
LEFT JOIN 
    inventory i ON f.film_id = i.film_id
GROUP BY 
    f.title
HAVING 
    availability_status = 'NOT Available'
ORDER BY 
    f.title;
